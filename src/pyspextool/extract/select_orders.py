import numpy as np

from pyspextool.extract import config
from pyspextool.extract.trace_apertures import trace_apertures
from pyspextool.io.check import check_parameter
from pyspextool.io.files import extract_filestring
from pyspextool.plot.plot_profiles import plot_profiles


def select_orders(include=None, exclude=None, include_all=False, verbose=True,
                  qaplot=False, qafile=True):
    """
    To set which orders are to be traced and extracted

    Parameters
    ----------
    include : int, list, str, optional
        If the type is int, the single order to include.
        If the type is list, a list of integer orders to include.
        If the type is str, a str giving the orders, e.g. '1-3,4,5'.

    exclude : int, list, str, optional
        If the type is int, the single order to include.
        If the type is list, a list of integer orders to include.
        If the type is str, a str giving the orders, e.g. '1-3,4,5'.

    include_all : {False, True}, optional
        Set to include all orders.

    verbose : {True, False}, optional
        Set to True for command line updates during execution.

    qaplot : {False, True}, optional
        Set to True to plot the profiles interactively.

    qafile : {False, True}, optional
        Set to True to write a QA plot to disk.
    Returns
    -------
    None
    Updates the config.state['xsdoorders'] or config.state['psdoorders'] 
    variable, updates the QA plot generated by locate_aperture_positions, 
    and reruns the trace_apertures() function if config.state['exttype'] = 'xs'.

    Examples
    --------
    select_orders(include=3)
    select_orders(include=[3, 4])
    select_orders(include='3-4,7-9')
    select_orders(exclude=3)
    select_orders(exclude=[3, 4])
    select_orders(exclude='3-4,7-9')

    """



    #
    # Check parameters
    #

    check_parameter('select_orders', 'include', include,
                    ['NoneType', 'int', 'list', 'str'])

    check_parameter('select_orders', 'exclude', exclude,
                    ['NoneType', 'int', 'list', 'str'])

    check_parameter('select_orders', 'include_all', include_all, 'bool')

    check_parameter('select_orders', 'qaplot', qaplot, 'bool')

    #
    # Ensure only one optional argument is passed
    #

    if include is not None and exclude is not None:
        message = 'Cannot use both parameters `include` and `remove`.'
        raise ValueError(message)


    #
    # Store the user inputs
    #

    config.user['orders']['include'] = include
    config.user['orders']['exclude'] = exclude
    config.user['orders']['include_all'] = include_all
    config.user['orders']['verbose'] = verbose
    config.user['orders']['qaplot'] = qaplot
    config.user['orders']['qafile'] = qafile
    
    #
    # Update command line if requested.
    #
    if verbose is True:
        print('Updating order selection...')

    
    #
    # Do the checks
    #

    if include is not None:

        if isinstance(include, int) is True:
            include = np.array(include, dtype=int)

        if isinstance(include, list) is True:
            include = np.array(include, dtype=int)

        if isinstance(include, str) is True:
            include = np.array(extract_filestring(include, 'index'), dtype=int)

        # Find the overlap 

        test = np.isin(config.state['orders'], include)

        # Test to make sure they are orders you are allowed work with

        if np.sum(test) != np.size(include):
            message = 'A requested order does not exist.'
            raise ValueError(message)

    if exclude is not None:

        if isinstance(exclude, int) is True:
            exclude = np.array(exclude, dtype=int)

        if isinstance(exclude, list) is True:
            exclude = np.array(exclude, dtype=int)

        if isinstance(exclude, str):
            exclude = np.array(extract_filestring(exclude, 'index'), dtype=int)

        # Find the overlap 

        test = ~np.isin(config.state['orders'], exclude)

        # Test to make sure they are orders you are allowed work with

        if np.sum(~test) != np.size(exclude):
            message = 'A requested order does not exist.'
            raise ValueError(message)

    if include_all is True:
        test = np.full(config.state['norders'], True)

    #
    # Set the correct doorders variable
    #

    if config.state['exttype'] == 'xs':

        config.state['xsdoorders'] = test
        doorders = test

    else:

        config.state['psdoorders'] = test
        doorders = test

    if qaplot is True:
        plot_profiles(config.state['profiles'], config.state['slith_arc'],
                      doorders, apertures=config.state['apertures'])

    if qafile is True:
        qafileinfo = {'figsize': (8.5, 11),
                      'filepath': config.user['setup']['qapath'],
                      'filename': config.state['qafilename'] +
                                  '_aperturepositions',
                      'extension': config.user['setup']['qaextension']}

        plot_profiles(config.state['profiles'], config.state['slith_arc'],
                      doorders, apertures=config.state['apertures'],
                      qafileinfo=qafileinfo)

    #
    # Do the trace if the extraction is extended source
    #

    if config.state['exttype'] == 'xs':
        trace_apertures(verbose=verbose, qaplot=qaplot, qafile=qafile)
